from datetime import datetime
from databricks_jobs import jobs_service_client
from databricks.sdk.service.jobs import (
    RunSubmit, 
    NotebookTask, 
    JobTaskSettings,
    ExistingCluster
)

def invoke_notebook_as_job(notebook_path: str, 
                          job_name: str,
                          cluster_id: str,
                          parameters: dict = None,
                          timeout_seconds: int = 3600):
    """
    Invokes a Databricks notebook as a separate job on a specific cluster
    
    Args:
        notebook_path: Full path to the notebook in Databricks workspace
        job_name: Name for the job run
        cluster_id: ID of the existing cluster to run the job on
        parameters: Dictionary of parameters to pass to the notebook
        timeout_seconds: Maximum time to wait for job completion
    
    Returns:
        job_run_id: The ID of the submitted job run
    """
    
    # Configure the notebook task
    notebook_task = NotebookTask(
        notebook_path=notebook_path,
        base_parameters=parameters
    )
    
    # Configure existing cluster settings
    cluster_config = ExistingCluster(
        cluster_id=cluster_id
    )
    
    # Create the job submission
    job_config = RunSubmit(
        run_name=f"{job_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
        tasks=[JobTaskSettings(
            task_key="notebook_task",
            notebook_task=notebook_task,
            existing_cluster_id=cluster_id,  # Specify the cluster ID here
            timeout_seconds=timeout_seconds
        )]
    )
    
    # Submit the job
    run_response = jobs_service_client.create_run(job_config)
    job_run_id = run_response.run_id
    
    print(f"Submitted job run with ID: {job_run_id} on cluster: {cluster_id}")
    return job_run_id

def get_cluster_id_by_name(cluster_name: str) -> str:
    """
    Helper function to get cluster ID from cluster name
    
    Args:
        cluster_name: Name of the cluster
        
    Returns:
        cluster_id: ID of the cluster if found, None otherwise
    """
    clusters = jobs_service_client.clusters.list()
    for cluster in clusters:
        if cluster.cluster_name == cluster_name:
            return cluster.cluster_id
    raise ValueError(f"Cluster with name '{cluster_name}' not found")

# Example usage
if __name__ == "__main__":
    notebook_params = {
        "input_date": "2024-03-01",
        "environment": "production"
    }
    
    # Option 1: Using known cluster ID
    cluster_id = "0318-235542-abc123"
    
    # Option 2: Getting cluster ID by name
    # cluster_id = get_cluster_id_by_name("my-all-purpose-cluster")
    
    job_run_id = invoke_notebook_as_job(
        notebook_path="/Users/your_username/path/to/target_notebook",
        job_name="data_transformation_job",
        cluster_id=cluster_id,
        parameters=notebook_params
    )
