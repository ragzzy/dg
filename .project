name,email,username,password
John Doe,john.doe@example.com,johndoe,johndoe_password
Jane Smith,jane.smith@example.com,janesmith,janesmith_password


email,certification_name,expiry_date
john.doe@example.com,Certification A,2024-12-31
john.doe@example.com,Certification B,2025-06-30
jane.smith@example.com,Certification C,2023-08-15

import streamlit as st
import pandas as pd
from datetime import datetime

# Load employee data from CSV
employees_df = pd.read_csv('employees.csv')

# Load certifications data from CSV
certifications_df = pd.read_csv('certifications.csv')

# User authentication
authenticated_user = None

# Streamlit App
def main():
    global authenticated_user

    st.title("Employee Certification Management")

    # Simple authentication mechanism
    if authenticated_user is None:
        username = st.text_input("Username:")
        password = st.text_input("Password:", type="password")

        if st.button("Login"):
            authenticated_user = authenticate_user(username, password)
            if authenticated_user is None:
                st.warning("Invalid credentials. Please try again.")
            else:
                st.success(f"Welcome, {authenticated_user['name']}!")

    if authenticated_user:
        st.sidebar.markdown(f"Logged in as: {authenticated_user['name']}")
        menu = ["Home", "Add Certification", "Remove Certification", "View Certifications", "Logout"]
        choice = st.sidebar.selectbox("Menu", menu)

        if choice == "Home":
            show_home()
        elif choice == "Add Certification":
            add_certification()
        elif choice == "Remove Certification":
            remove_certification()
        elif choice == "View Certifications":
            view_certifications()
        elif choice == "Logout":
            authenticated_user = None
            st.success("Logged out successfully.")

# Function to display the home page
def show_home():
    st.header("Employee List with Certifications")

    # Display the employee data
    st.write("**Employee Data**")
    st.write(employees_df)

    # Display the certifications data
    st.write("**Certifications Data**")
    st.write(certifications_df)

# Function to add certification for an employee
def add_certification():
    st.header("Add Certification")

    certification_name = st.text_input("Enter certification name:")
    expiry_date = st.date_input("Certification Expiry Date:", datetime.today())

    if st.button("Add Certification"):
        email = authenticated_user['email']
        certification_data = {'email': email, 'certification_name': certification_name, 'expiry_date': expiry_date.strftime("%Y-%m-%d")}
        certifications_df = pd.concat([certifications_df, pd.DataFrame([certification_data])], ignore_index=True)
        certifications_df.to_csv('certifications.csv', index=False)
        st.success(f"Certification added for {authenticated_user['name']}")

# Function to remove certification for an employee
def remove_certification():
    st.header("Remove Certification")

    certification_name = st.text_input("Enter certification name:")

    if st.button("Remove Certification"):
        email = authenticated_user['email']
        certifications_df.drop(certifications_df[(certifications_df['email'] == email) & (certifications_df['certification_name'] == certification_name)].index, inplace=True)
        certifications_df.to_csv('certifications.csv', index=False)
        st.success(f"Certification removed for {authenticated_user['name']}")

# Function to view certifications for the authenticated employee
def view_certifications():
    st.header("View Certifications")

    email = authenticated_user['email']
    user_certifications = certifications_df[certifications_df['email'] == email]

    if not user_certifications.empty:
        st.write(f"**{authenticated_user['name']}'s Certifications**")
        st.write(user_certifications[['certification_name', 'expiry_date']])
    else:
        st.warning(f"No certifications found for {authenticated_user['name']}.")

# Helper function for user authentication
def authenticate_user(username, password):
    user = employees_df[(employees_df['username'] == username) & (employees_df['password'] == password)]
    if not user.empty:
        return user.to_dict(orient='records')[0]
    return None

if __name__ == "__main__":
    main()
