from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient
import zipfile
import os

# Azure Blob Storage details
storage_account_name = "<your_storage_account_name>"
storage_account_key = "<your_storage_account_key>"
container_name = "<your_container_name>"
blob_service_client = BlobServiceClient(account_url=f"https://{storage_account_name}.blob.core.windows.net", credential=storage_account_key)

# Directory to temporarily save downloaded files
local_dir = "/tmp/blob_files"
os.makedirs(local_dir, exist_ok=True)

# Function to download blobs from the container
def download_blobs(container_client, local_dir):
    local_file_paths = []
    blobs = container_client.list_blobs()
    for blob in blobs:
        blob_client = container_client.get_blob_client(blob)
        download_file_path = os.path.join(local_dir, blob.name)
        with open(download_file_path, "wb") as download_file:
            download_file.write(blob_client.download_blob().readall())
        local_file_paths.append(download_file_path)
    return local_file_paths

# Create container client
container_client = blob_service_client.get_container_client(container_name)

# Download blobs
local_file_paths = download_blobs(container_client, local_dir)

# Create a password-protected ZIP file
zip_file_path = "/tmp/your_zip_file.zip"
password = b"your_password"

with zipfile.ZipFile(zip_file_path, 'w') as zipf:
    for file_path in local_file_paths:
        zipf.write(file_path, os.path.basename(file_path))
        zipf.setpassword(password)

# Upload the ZIP file back to Azure Blob Storage
zip_blob_client = blob_service_client.get_blob_client(container=container_name, blob="your_zip_file.zip")

with open(zip_file_path, "rb") as data:
    zip_blob_client.upload_blob(data, overwrite=True)

# Clean up local files
for file_path in local_file_paths:
    os.remove(file_path)
os.remove(zip_file_path)
